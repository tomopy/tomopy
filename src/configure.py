# configure system-specifc settings for tomopy Makefiles
#
# writes systems-dependent Mk.config file

import sys
import os
from os.path import join as pjoin
from os.path import exists as pexists
from os.path import isdir
import shutil
import time

class Config:
    def __init__(self):
        self.sharedlib = ''
        self.arch_target = ''
        self.link_libs = ''
        self.include = ''
        self.conda_compat = ''

        self.link_libs = '%s' % pjoin(sys.prefix, 'lib')

        # anaconda compat?
        if 'Anaconda' in sys.version:
            compat = pjoin(sys.prefix, 'compiler_compat')
            if pexists(compat) and isdir(compat):
                self.conda_compat = '-B %s' % compat

        # includes
        top_include = pjoin(sys.prefix, 'include')
        includes = ['-I%s' % (top_include)]
        for fname in os.listdir(top_include):
            tdir = pjoin(top_include, fname)
            if isdir(tdir) and  'python' in fname:
                includes.append('-I%s' % tdir)

        self.include = '%s' % (' '.join(includes))

    def format(self):
        buff = ['#### autogenerated %s' % time.ctime(),
                'SHAREDLIB     = %s' % self.sharedlib,
                'ARCH_TARGET   = %s' % self.arch_target,
                'LINK_LIB      = %s' % self.link_libs,
                'INCLUDE       = %s' % self.include,
                'CONDA_COMPAT  = %s' % self.conda_compat,
                '####', '']

        return '\n'.join(buff)


def config_linux():
    """ config for Linux"""
    config = Config()
    config.sharedlib = 'libtomopy.so'
    return config.format()

def config_macos():
    """ config for MacOS"""
    config = Config()
    config.sharedlib = 'libtomopy.dylib'
    config.arch_target = '-arch x86_64'
    return config.format()

def config_windows():
    """ config for Windows"""
    """ config for Linux"""
    config = Config()
    config.sharedlib = 'tomopy.dll'
    return config.format()

config = None
if sys.platform.lower().startswith('win'):
    shutil.copy('Makefile.windows', 'Makefile')
    config = config_windows
elif sys.platform == 'darwin':
    shutil.copy('Makefile.darwin', 'Makefile')
    config = config_macos
elif sys.platform == 'linux':
    shutil.copy('Makefile.linux', 'Makefile')
    config = config_linux

if config is not None:
    fout = open('Mk.config', 'w')
    fout.write( config() )
    fout.close()
    print("configure.py successful, ready for 'make install'")
