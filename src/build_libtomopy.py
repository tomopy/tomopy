# configure system-specifc settings and run make
# to build libtomopy on the current system
#


import sys
import os
from os.path import join as pjoin
from os.path import exists as pexists
from os.path import isdir
import subprocess
import time

class Config:
    def __init__(self):
        self.compilerdir = ''
        self.sharedlib = ''
        self.arch_target = ''
        self.conda_compat = ''
        self.includes = []
        self.linklibs = ['%s' % pjoin(sys.prefix, 'lib')]

        # anaconda compat?
        if 'Anaconda' in sys.version:
            compat = pjoin(sys.prefix, 'compiler_compat')
            if pexists(compat) and isdir(compat):
                self.conda_compat = '-B %s' % compat

        # includes
        top_include = pjoin(sys.prefix, 'include')
        includes = [top_include]
        for fname in os.listdir(top_include):
            tdir = pjoin(top_include, fname)
            if isdir(tdir) and  'python' in fname:
                includes.append(tdir)

        self.includes = includes

    def format(self):
        include = ' '.join(['-I%s' % s for s in self.includes])
        linklib = ' '.join(['-L%s' % s for s in self.linklibs])
        buff = ['## generated by build.py  %s' % time.ctime(),
                'COMPILER_DIR  = %s' % self.compilerdir,
                'SHAREDLIB     = %s' % self.sharedlib,
                'ARCH_TARGET   = %s' % self.arch_target,
                'LINK_LIB      = %s' % linklib,
                'INCLUDE       = %s' % include,
                'CONDA_COMPAT  = %s' % self.conda_compat,
                '####', '']
        return '\n'.join(buff).replace('\\', '/')

def config_linux():
    """ config for Linux"""
    config = Config()
    config.sharedlib = 'libtomopy.so'
    return config.format()

def config_macosx():
    """ config for MacOSX"""
    config = Config()
    config.sharedlib = 'libtomopy.dylib'
    config.arch_target = '-arch x86_64'
    return config.format()

def config_windows():
    """ config for Windows"""
    config = Config()
    compilerdir = None

    if 'Anaconda' in sys.version:
        mingw_path = pjoin(sys.prefix, 'MinGW', 'bin')
        mingw_gcc = pjoin(mingw_path, 'gcc.exe')
        if os.path.exists(mingw_gcc):
            compilerdir = mingw_path

    if compilerdir is None:
        for pdir in os.environ['PATH'].split(';'):
            gcc = pjoin(pdir, 'gcc.exe')
            if pexists(gcc):
                compilerdir = pdir
                break
    if compilerdir is not None:
        config.compilerdir = compilerdir
    config.includes.append(pjoin(sys.prefix, 'Library', 'include'))
    config.sharedlib = 'libtomopy.dll'
    config.linklibs = [sys.prefix]
    return config.format()


def build_libtomopy():
    """build libtomopy shared library for the current system.

    This does the following steps:
      1. write Mk.config for current os
      2. run make -j4 for the the current os

    """
    conf = config_linux()
    makefile = 'Makefile.linux'
    if sys.platform.lower().startswith('win'):
        makefile ='Makefile.windows'
        conf = config_windows()
    elif sys.platform == 'darwin':
        makefile = 'Makefile.darwin'
        conf = config_macosx()

    with open('Mk.config', 'w') as fout:
        fout.write(conf)

    subprocess.check_call(('make', '-j4', '-f', makefile))

if __name__ == '__main__':
    build_libtomopy()
